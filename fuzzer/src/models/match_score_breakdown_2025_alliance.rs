/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.16
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchScoreBreakdown2025Alliance {
    #[serde(rename = "adjustPoints", skip_serializing_if = "Option::is_none")]
    pub adjust_points: Option<i32>,
    #[serde(rename = "algaePoints", skip_serializing_if = "Option::is_none")]
    pub algae_points: Option<i32>,
    #[serde(rename = "autoBonusAchieved", skip_serializing_if = "Option::is_none")]
    pub auto_bonus_achieved: Option<bool>,
    #[serde(rename = "autoCoralCount", skip_serializing_if = "Option::is_none")]
    pub auto_coral_count: Option<i32>,
    #[serde(rename = "autoCoralPoints", skip_serializing_if = "Option::is_none")]
    pub auto_coral_points: Option<i32>,
    #[serde(rename = "autoLineRobot1", skip_serializing_if = "Option::is_none")]
    pub auto_line_robot1: Option<AutoLineRobot1>,
    #[serde(rename = "autoLineRobot2", skip_serializing_if = "Option::is_none")]
    pub auto_line_robot2: Option<AutoLineRobot2>,
    #[serde(rename = "autoLineRobot3", skip_serializing_if = "Option::is_none")]
    pub auto_line_robot3: Option<AutoLineRobot3>,
    #[serde(rename = "autoMobilityPoints", skip_serializing_if = "Option::is_none")]
    pub auto_mobility_points: Option<i32>,
    #[serde(rename = "autoPoints", skip_serializing_if = "Option::is_none")]
    pub auto_points: Option<i32>,
    #[serde(rename = "autoReef", skip_serializing_if = "Option::is_none")]
    pub auto_reef: Option<Box<models::MatchScoreBreakdown2025AllianceAutoReef>>,
    #[serde(rename = "bargeBonusAchieved", skip_serializing_if = "Option::is_none")]
    pub barge_bonus_achieved: Option<bool>,
    #[serde(rename = "coopertitionCriteriaMet", skip_serializing_if = "Option::is_none")]
    pub coopertition_criteria_met: Option<bool>,
    #[serde(rename = "coralBonusAchieved", skip_serializing_if = "Option::is_none")]
    pub coral_bonus_achieved: Option<bool>,
    #[serde(rename = "endGameBargePoints", skip_serializing_if = "Option::is_none")]
    pub end_game_barge_points: Option<i32>,
    #[serde(rename = "endGameRobot1", skip_serializing_if = "Option::is_none")]
    pub end_game_robot1: Option<EndGameRobot1>,
    #[serde(rename = "endGameRobot2", skip_serializing_if = "Option::is_none")]
    pub end_game_robot2: Option<EndGameRobot2>,
    #[serde(rename = "endGameRobot3", skip_serializing_if = "Option::is_none")]
    pub end_game_robot3: Option<EndGameRobot3>,
    #[serde(rename = "foulCount", skip_serializing_if = "Option::is_none")]
    pub foul_count: Option<i32>,
    #[serde(rename = "foulPoints", skip_serializing_if = "Option::is_none")]
    pub foul_points: Option<i32>,
    #[serde(rename = "g206Penalty", skip_serializing_if = "Option::is_none")]
    pub g206_penalty: Option<bool>,
    #[serde(rename = "g410Penalty", skip_serializing_if = "Option::is_none")]
    pub g410_penalty: Option<bool>,
    #[serde(rename = "g418Penalty", skip_serializing_if = "Option::is_none")]
    pub g418_penalty: Option<bool>,
    #[serde(rename = "g428Penalty", skip_serializing_if = "Option::is_none")]
    pub g428_penalty: Option<bool>,
    #[serde(rename = "netAlgaeCount", skip_serializing_if = "Option::is_none")]
    pub net_algae_count: Option<i32>,
    #[serde(rename = "rp", skip_serializing_if = "Option::is_none")]
    pub rp: Option<i32>,
    #[serde(rename = "techFoulCount", skip_serializing_if = "Option::is_none")]
    pub tech_foul_count: Option<i32>,
    #[serde(rename = "teleopCoralCount", skip_serializing_if = "Option::is_none")]
    pub teleop_coral_count: Option<i32>,
    #[serde(rename = "teleopCoralPoints", skip_serializing_if = "Option::is_none")]
    pub teleop_coral_points: Option<i32>,
    #[serde(rename = "teleopPoints", skip_serializing_if = "Option::is_none")]
    pub teleop_points: Option<i32>,
    #[serde(rename = "teleopReef", skip_serializing_if = "Option::is_none")]
    pub teleop_reef: Option<Box<models::MatchScoreBreakdown2025AllianceAutoReef>>,
    #[serde(rename = "totalPoints", skip_serializing_if = "Option::is_none")]
    pub total_points: Option<i32>,
    #[serde(rename = "wallAlgaeCount", skip_serializing_if = "Option::is_none")]
    pub wall_algae_count: Option<i32>,
}

impl MatchScoreBreakdown2025Alliance {
    pub fn new() -> MatchScoreBreakdown2025Alliance {
        MatchScoreBreakdown2025Alliance {
            adjust_points: None,
            algae_points: None,
            auto_bonus_achieved: None,
            auto_coral_count: None,
            auto_coral_points: None,
            auto_line_robot1: None,
            auto_line_robot2: None,
            auto_line_robot3: None,
            auto_mobility_points: None,
            auto_points: None,
            auto_reef: None,
            barge_bonus_achieved: None,
            coopertition_criteria_met: None,
            coral_bonus_achieved: None,
            end_game_barge_points: None,
            end_game_robot1: None,
            end_game_robot2: None,
            end_game_robot3: None,
            foul_count: None,
            foul_points: None,
            g206_penalty: None,
            g410_penalty: None,
            g418_penalty: None,
            g428_penalty: None,
            net_algae_count: None,
            rp: None,
            tech_foul_count: None,
            teleop_coral_count: None,
            teleop_coral_points: None,
            teleop_points: None,
            teleop_reef: None,
            total_points: None,
            wall_algae_count: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoLineRobot1 {
    #[serde(rename = "No")]
    No,
    #[serde(rename = "Yes")]
    Yes,
}

impl Default for AutoLineRobot1 {
    fn default() -> AutoLineRobot1 {
        Self::No
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoLineRobot2 {
    #[serde(rename = "No")]
    No,
    #[serde(rename = "Yes")]
    Yes,
}

impl Default for AutoLineRobot2 {
    fn default() -> AutoLineRobot2 {
        Self::No
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoLineRobot3 {
    #[serde(rename = "No")]
    No,
    #[serde(rename = "Yes")]
    Yes,
}

impl Default for AutoLineRobot3 {
    fn default() -> AutoLineRobot3 {
        Self::No
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameRobot1 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Parked")]
    Parked,
    #[serde(rename = "ShallowCage")]
    ShallowCage,
    #[serde(rename = "DeepCage")]
    DeepCage,
}

impl Default for EndGameRobot1 {
    fn default() -> EndGameRobot1 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameRobot2 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Parked")]
    Parked,
    #[serde(rename = "ShallowCage")]
    ShallowCage,
    #[serde(rename = "DeepCage")]
    DeepCage,
}

impl Default for EndGameRobot2 {
    fn default() -> EndGameRobot2 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameRobot3 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Parked")]
    Parked,
    #[serde(rename = "ShallowCage")]
    ShallowCage,
    #[serde(rename = "DeepCage")]
    DeepCage,
}

impl Default for EndGameRobot3 {
    fn default() -> EndGameRobot3 {
        Self::None
    }
}

