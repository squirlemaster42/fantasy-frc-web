/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.16
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchScoreBreakdown2023Alliance {
    #[serde(rename = "activationBonusAchieved", skip_serializing_if = "Option::is_none")]
    pub activation_bonus_achieved: Option<bool>,
    #[serde(rename = "adjustPoints", skip_serializing_if = "Option::is_none")]
    pub adjust_points: Option<i32>,
    #[serde(rename = "autoBridgeState", skip_serializing_if = "Option::is_none")]
    pub auto_bridge_state: Option<AutoBridgeState>,
    #[serde(rename = "autoChargeStationPoints", skip_serializing_if = "Option::is_none")]
    pub auto_charge_station_points: Option<i32>,
    #[serde(rename = "autoChargeStationRobot1", skip_serializing_if = "Option::is_none")]
    pub auto_charge_station_robot1: Option<AutoChargeStationRobot1>,
    #[serde(rename = "autoChargeStationRobot2", skip_serializing_if = "Option::is_none")]
    pub auto_charge_station_robot2: Option<AutoChargeStationRobot2>,
    #[serde(rename = "autoChargeStationRobot3", skip_serializing_if = "Option::is_none")]
    pub auto_charge_station_robot3: Option<AutoChargeStationRobot3>,
    #[serde(rename = "autoDocked", skip_serializing_if = "Option::is_none")]
    pub auto_docked: Option<bool>,
    #[serde(rename = "autoCommunity", skip_serializing_if = "Option::is_none")]
    pub auto_community: Option<Box<models::MatchScoreBreakdown2023AllianceAutoCommunity>>,
    #[serde(rename = "autoGamePieceCount", skip_serializing_if = "Option::is_none")]
    pub auto_game_piece_count: Option<i32>,
    #[serde(rename = "autoGamePiecePoints", skip_serializing_if = "Option::is_none")]
    pub auto_game_piece_points: Option<i32>,
    #[serde(rename = "autoMobilityPoints", skip_serializing_if = "Option::is_none")]
    pub auto_mobility_points: Option<i32>,
    #[serde(rename = "mobilityRobot1", skip_serializing_if = "Option::is_none")]
    pub mobility_robot1: Option<MobilityRobot1>,
    #[serde(rename = "mobilityRobot2", skip_serializing_if = "Option::is_none")]
    pub mobility_robot2: Option<MobilityRobot2>,
    #[serde(rename = "mobilityRobot3", skip_serializing_if = "Option::is_none")]
    pub mobility_robot3: Option<MobilityRobot3>,
    #[serde(rename = "autoPoints", skip_serializing_if = "Option::is_none")]
    pub auto_points: Option<i32>,
    #[serde(rename = "coopGamePieceCount", skip_serializing_if = "Option::is_none")]
    pub coop_game_piece_count: Option<i32>,
    #[serde(rename = "coopertitionCriteriaMet", skip_serializing_if = "Option::is_none")]
    pub coopertition_criteria_met: Option<bool>,
    #[serde(rename = "endGameBridgeState", skip_serializing_if = "Option::is_none")]
    pub end_game_bridge_state: Option<EndGameBridgeState>,
    #[serde(rename = "endGameChargeStationPoints", skip_serializing_if = "Option::is_none")]
    pub end_game_charge_station_points: Option<i32>,
    #[serde(rename = "endGameChargeStationRobot1", skip_serializing_if = "Option::is_none")]
    pub end_game_charge_station_robot1: Option<EndGameChargeStationRobot1>,
    #[serde(rename = "endGameChargeStationRobot2", skip_serializing_if = "Option::is_none")]
    pub end_game_charge_station_robot2: Option<EndGameChargeStationRobot2>,
    #[serde(rename = "endGameChargeStationRobot3", skip_serializing_if = "Option::is_none")]
    pub end_game_charge_station_robot3: Option<EndGameChargeStationRobot3>,
    #[serde(rename = "endGameParkPoints", skip_serializing_if = "Option::is_none")]
    pub end_game_park_points: Option<i32>,
    #[serde(rename = "extraGamePieceCount", skip_serializing_if = "Option::is_none")]
    pub extra_game_piece_count: Option<i32>,
    #[serde(rename = "foulCount", skip_serializing_if = "Option::is_none")]
    pub foul_count: Option<i32>,
    #[serde(rename = "foulPoints", skip_serializing_if = "Option::is_none")]
    pub foul_points: Option<i32>,
    #[serde(rename = "techFoulCount", skip_serializing_if = "Option::is_none")]
    pub tech_foul_count: Option<i32>,
    #[serde(rename = "linkPoints", skip_serializing_if = "Option::is_none")]
    pub link_points: Option<i32>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<Vec<models::MatchScoreBreakdown2023AllianceLinksInner>>,
    #[serde(rename = "sustainabilityBonusAchieved", skip_serializing_if = "Option::is_none")]
    pub sustainability_bonus_achieved: Option<bool>,
    #[serde(rename = "teleopCommunity", skip_serializing_if = "Option::is_none")]
    pub teleop_community: Option<Box<models::MatchScoreBreakdown2023AllianceAutoCommunity>>,
    #[serde(rename = "teleopGamePieceCount", skip_serializing_if = "Option::is_none")]
    pub teleop_game_piece_count: Option<i32>,
    #[serde(rename = "teleopGamePiecePoints", skip_serializing_if = "Option::is_none")]
    pub teleop_game_piece_points: Option<i32>,
    #[serde(rename = "totalChargeStationPoints", skip_serializing_if = "Option::is_none")]
    pub total_charge_station_points: Option<i32>,
    #[serde(rename = "teleopPoints", skip_serializing_if = "Option::is_none")]
    pub teleop_points: Option<i32>,
    #[serde(rename = "rp", skip_serializing_if = "Option::is_none")]
    pub rp: Option<i32>,
    #[serde(rename = "totalPoints", skip_serializing_if = "Option::is_none")]
    pub total_points: Option<i32>,
}

impl MatchScoreBreakdown2023Alliance {
    pub fn new() -> MatchScoreBreakdown2023Alliance {
        MatchScoreBreakdown2023Alliance {
            activation_bonus_achieved: None,
            adjust_points: None,
            auto_bridge_state: None,
            auto_charge_station_points: None,
            auto_charge_station_robot1: None,
            auto_charge_station_robot2: None,
            auto_charge_station_robot3: None,
            auto_docked: None,
            auto_community: None,
            auto_game_piece_count: None,
            auto_game_piece_points: None,
            auto_mobility_points: None,
            mobility_robot1: None,
            mobility_robot2: None,
            mobility_robot3: None,
            auto_points: None,
            coop_game_piece_count: None,
            coopertition_criteria_met: None,
            end_game_bridge_state: None,
            end_game_charge_station_points: None,
            end_game_charge_station_robot1: None,
            end_game_charge_station_robot2: None,
            end_game_charge_station_robot3: None,
            end_game_park_points: None,
            extra_game_piece_count: None,
            foul_count: None,
            foul_points: None,
            tech_foul_count: None,
            link_points: None,
            links: None,
            sustainability_bonus_achieved: None,
            teleop_community: None,
            teleop_game_piece_count: None,
            teleop_game_piece_points: None,
            total_charge_station_points: None,
            teleop_points: None,
            rp: None,
            total_points: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoBridgeState {
    #[serde(rename = "NotLevel")]
    NotLevel,
    #[serde(rename = "Level")]
    Level,
}

impl Default for AutoBridgeState {
    fn default() -> AutoBridgeState {
        Self::NotLevel
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoChargeStationRobot1 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
}

impl Default for AutoChargeStationRobot1 {
    fn default() -> AutoChargeStationRobot1 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoChargeStationRobot2 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
}

impl Default for AutoChargeStationRobot2 {
    fn default() -> AutoChargeStationRobot2 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoChargeStationRobot3 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
}

impl Default for AutoChargeStationRobot3 {
    fn default() -> AutoChargeStationRobot3 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MobilityRobot1 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for MobilityRobot1 {
    fn default() -> MobilityRobot1 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MobilityRobot2 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for MobilityRobot2 {
    fn default() -> MobilityRobot2 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MobilityRobot3 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for MobilityRobot3 {
    fn default() -> MobilityRobot3 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameBridgeState {
    #[serde(rename = "NotLevel")]
    NotLevel,
    #[serde(rename = "Level")]
    Level,
}

impl Default for EndGameBridgeState {
    fn default() -> EndGameBridgeState {
        Self::NotLevel
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameChargeStationRobot1 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
    #[serde(rename = "Park")]
    Park,
}

impl Default for EndGameChargeStationRobot1 {
    fn default() -> EndGameChargeStationRobot1 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameChargeStationRobot2 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
    #[serde(rename = "Park")]
    Park,
}

impl Default for EndGameChargeStationRobot2 {
    fn default() -> EndGameChargeStationRobot2 {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndGameChargeStationRobot3 {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Docked")]
    Docked,
    #[serde(rename = "Park")]
    Park,
}

impl Default for EndGameChargeStationRobot3 {
    fn default() -> EndGameChargeStationRobot3 {
        Self::None
    }
}

