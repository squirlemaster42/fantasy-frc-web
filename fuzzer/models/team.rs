/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.16
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Team {
    /// TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
    #[serde(rename = "key")]
    pub key: String,
    /// Official team number issued by FIRST.
    #[serde(rename = "team_number")]
    pub team_number: i32,
    /// Team nickname provided by FIRST.
    #[serde(rename = "nickname")]
    pub nickname: String,
    /// Official long name registered with FIRST.
    #[serde(rename = "name")]
    pub name: String,
    /// Name of team school or affilited group registered with FIRST.
    #[serde(rename = "school_name", deserialize_with = "Option::deserialize")]
    pub school_name: Option<String>,
    /// City of team derived from parsing the address registered with FIRST.
    #[serde(rename = "city", deserialize_with = "Option::deserialize")]
    pub city: Option<String>,
    /// State of team derived from parsing the address registered with FIRST.
    #[serde(rename = "state_prov", deserialize_with = "Option::deserialize")]
    pub state_prov: Option<String>,
    /// Country of team derived from parsing the address registered with FIRST.
    #[serde(rename = "country", deserialize_with = "Option::deserialize")]
    pub country: Option<String>,
    /// Will be NULL, for future development.
    #[serde(rename = "address", deserialize_with = "Option::deserialize")]
    pub address: Option<String>,
    /// Postal code from the team address.
    #[serde(rename = "postal_code", deserialize_with = "Option::deserialize")]
    pub postal_code: Option<String>,
    /// Will be NULL, for future development.
    #[serde(rename = "gmaps_place_id", deserialize_with = "Option::deserialize")]
    pub gmaps_place_id: Option<String>,
    /// Will be NULL, for future development.
    #[serde(rename = "gmaps_url", deserialize_with = "Option::deserialize")]
    pub gmaps_url: Option<String>,
    /// Will be NULL, for future development.
    #[serde(rename = "lat", deserialize_with = "Option::deserialize")]
    pub lat: Option<f64>,
    /// Will be NULL, for future development.
    #[serde(rename = "lng", deserialize_with = "Option::deserialize")]
    pub lng: Option<f64>,
    /// Will be NULL, for future development.
    #[serde(rename = "location_name", deserialize_with = "Option::deserialize")]
    pub location_name: Option<String>,
    /// Official website associated with the team.
    #[serde(rename = "website", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub website: Option<Option<String>>,
    /// First year the team officially competed.
    #[serde(rename = "rookie_year", deserialize_with = "Option::deserialize")]
    pub rookie_year: Option<i32>,
}

impl Team {
    pub fn new(key: String, team_number: i32, nickname: String, name: String, school_name: Option<String>, city: Option<String>, state_prov: Option<String>, country: Option<String>, address: Option<String>, postal_code: Option<String>, gmaps_place_id: Option<String>, gmaps_url: Option<String>, lat: Option<f64>, lng: Option<f64>, location_name: Option<String>, rookie_year: Option<i32>) -> Team {
        Team {
            key,
            team_number,
            nickname,
            name,
            school_name,
            city,
            state_prov,
            country,
            address,
            postal_code,
            gmaps_place_id,
            gmaps_url,
            lat,
            lng,
            location_name,
            website: None,
            rookie_year,
        }
    }
}

