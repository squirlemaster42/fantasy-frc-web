/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.16
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchScoreBreakdown2022Alliance {
    #[serde(rename = "taxiRobot1", skip_serializing_if = "Option::is_none")]
    pub taxi_robot1: Option<TaxiRobot1>,
    #[serde(rename = "endgameRobot1", skip_serializing_if = "Option::is_none")]
    pub endgame_robot1: Option<EndgameRobot1>,
    #[serde(rename = "taxiRobot2", skip_serializing_if = "Option::is_none")]
    pub taxi_robot2: Option<TaxiRobot2>,
    #[serde(rename = "endgameRobot2", skip_serializing_if = "Option::is_none")]
    pub endgame_robot2: Option<EndgameRobot2>,
    #[serde(rename = "taxiRobot3", skip_serializing_if = "Option::is_none")]
    pub taxi_robot3: Option<TaxiRobot3>,
    #[serde(rename = "endgameRobot3", skip_serializing_if = "Option::is_none")]
    pub endgame_robot3: Option<EndgameRobot3>,
    #[serde(rename = "autoCargoLowerNear", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_lower_near: Option<i32>,
    #[serde(rename = "autoCargoLowerFar", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_lower_far: Option<i32>,
    #[serde(rename = "autoCargoLowerBlue", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_lower_blue: Option<i32>,
    #[serde(rename = "autoCargoLowerRed", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_lower_red: Option<i32>,
    #[serde(rename = "autoCargoUpperNear", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_upper_near: Option<i32>,
    #[serde(rename = "autoCargoUpperFar", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_upper_far: Option<i32>,
    #[serde(rename = "autoCargoUpperBlue", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_upper_blue: Option<i32>,
    #[serde(rename = "autoCargoUpperRed", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_upper_red: Option<i32>,
    #[serde(rename = "autoCargoTotal", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_total: Option<i32>,
    #[serde(rename = "teleopCargoLowerNear", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_lower_near: Option<i32>,
    #[serde(rename = "teleopCargoLowerFar", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_lower_far: Option<i32>,
    #[serde(rename = "teleopCargoLowerBlue", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_lower_blue: Option<i32>,
    #[serde(rename = "teleopCargoLowerRed", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_lower_red: Option<i32>,
    #[serde(rename = "teleopCargoUpperNear", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_upper_near: Option<i32>,
    #[serde(rename = "teleopCargoUpperFar", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_upper_far: Option<i32>,
    #[serde(rename = "teleopCargoUpperBlue", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_upper_blue: Option<i32>,
    #[serde(rename = "teleopCargoUpperRed", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_upper_red: Option<i32>,
    #[serde(rename = "teleopCargoTotal", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_total: Option<i32>,
    #[serde(rename = "matchCargoTotal", skip_serializing_if = "Option::is_none")]
    pub match_cargo_total: Option<i32>,
    #[serde(rename = "autoTaxiPoints", skip_serializing_if = "Option::is_none")]
    pub auto_taxi_points: Option<i32>,
    #[serde(rename = "autoCargoPoints", skip_serializing_if = "Option::is_none")]
    pub auto_cargo_points: Option<i32>,
    #[serde(rename = "autoPoints", skip_serializing_if = "Option::is_none")]
    pub auto_points: Option<i32>,
    #[serde(rename = "quintetAchieved", skip_serializing_if = "Option::is_none")]
    pub quintet_achieved: Option<bool>,
    #[serde(rename = "teleopCargoPoints", skip_serializing_if = "Option::is_none")]
    pub teleop_cargo_points: Option<i32>,
    #[serde(rename = "endgamePoints", skip_serializing_if = "Option::is_none")]
    pub endgame_points: Option<i32>,
    #[serde(rename = "teleopPoints", skip_serializing_if = "Option::is_none")]
    pub teleop_points: Option<i32>,
    #[serde(rename = "cargoBonusRankingPoint", skip_serializing_if = "Option::is_none")]
    pub cargo_bonus_ranking_point: Option<bool>,
    #[serde(rename = "hangarBonusRankingPoint", skip_serializing_if = "Option::is_none")]
    pub hangar_bonus_ranking_point: Option<bool>,
    #[serde(rename = "foulCount", skip_serializing_if = "Option::is_none")]
    pub foul_count: Option<i32>,
    #[serde(rename = "techFoulCount", skip_serializing_if = "Option::is_none")]
    pub tech_foul_count: Option<i32>,
    #[serde(rename = "adjustPoints", skip_serializing_if = "Option::is_none")]
    pub adjust_points: Option<i32>,
    #[serde(rename = "foulPoints", skip_serializing_if = "Option::is_none")]
    pub foul_points: Option<i32>,
    #[serde(rename = "rp", skip_serializing_if = "Option::is_none")]
    pub rp: Option<i32>,
    #[serde(rename = "totalPoints", skip_serializing_if = "Option::is_none")]
    pub total_points: Option<i32>,
}

impl MatchScoreBreakdown2022Alliance {
    pub fn new() -> MatchScoreBreakdown2022Alliance {
        MatchScoreBreakdown2022Alliance {
            taxi_robot1: None,
            endgame_robot1: None,
            taxi_robot2: None,
            endgame_robot2: None,
            taxi_robot3: None,
            endgame_robot3: None,
            auto_cargo_lower_near: None,
            auto_cargo_lower_far: None,
            auto_cargo_lower_blue: None,
            auto_cargo_lower_red: None,
            auto_cargo_upper_near: None,
            auto_cargo_upper_far: None,
            auto_cargo_upper_blue: None,
            auto_cargo_upper_red: None,
            auto_cargo_total: None,
            teleop_cargo_lower_near: None,
            teleop_cargo_lower_far: None,
            teleop_cargo_lower_blue: None,
            teleop_cargo_lower_red: None,
            teleop_cargo_upper_near: None,
            teleop_cargo_upper_far: None,
            teleop_cargo_upper_blue: None,
            teleop_cargo_upper_red: None,
            teleop_cargo_total: None,
            match_cargo_total: None,
            auto_taxi_points: None,
            auto_cargo_points: None,
            auto_points: None,
            quintet_achieved: None,
            teleop_cargo_points: None,
            endgame_points: None,
            teleop_points: None,
            cargo_bonus_ranking_point: None,
            hangar_bonus_ranking_point: None,
            foul_count: None,
            tech_foul_count: None,
            adjust_points: None,
            foul_points: None,
            rp: None,
            total_points: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxiRobot1 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for TaxiRobot1 {
    fn default() -> TaxiRobot1 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndgameRobot1 {
    #[serde(rename = "Traversal")]
    Traversal,
    #[serde(rename = "High")]
    High,
    #[serde(rename = "Mid")]
    Mid,
    #[serde(rename = "Low")]
    Low,
    #[serde(rename = "None")]
    None,
}

impl Default for EndgameRobot1 {
    fn default() -> EndgameRobot1 {
        Self::Traversal
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxiRobot2 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for TaxiRobot2 {
    fn default() -> TaxiRobot2 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndgameRobot2 {
    #[serde(rename = "Traversal")]
    Traversal,
    #[serde(rename = "High")]
    High,
    #[serde(rename = "Mid")]
    Mid,
    #[serde(rename = "Low")]
    Low,
    #[serde(rename = "None")]
    None,
}

impl Default for EndgameRobot2 {
    fn default() -> EndgameRobot2 {
        Self::Traversal
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxiRobot3 {
    #[serde(rename = "Yes")]
    Yes,
    #[serde(rename = "No")]
    No,
}

impl Default for TaxiRobot3 {
    fn default() -> TaxiRobot3 {
        Self::Yes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndgameRobot3 {
    #[serde(rename = "Traversal")]
    Traversal,
    #[serde(rename = "High")]
    High,
    #[serde(rename = "Mid")]
    Mid,
    #[serde(rename = "Low")]
    Low,
    #[serde(rename = "None")]
    None,
}

impl Default for EndgameRobot3 {
    fn default() -> EndgameRobot3 {
        Self::Traversal
    }
}

