/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.16
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RegionalAdvancement : Information about how a regional team qualified for FIRST Championship.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegionalAdvancement {
    /// Whether or not the team qualified for Championship.
    #[serde(rename = "cmp")]
    pub cmp: bool,
    #[serde(rename = "cmp_status")]
    pub cmp_status: CmpStatus,
    /// The event key at which the team qualified
    #[serde(rename = "qualifying_event", skip_serializing_if = "Option::is_none")]
    pub qualifying_event: Option<String>,
    /// The name of the award which qualified the team
    #[serde(rename = "qualifying_award_name", skip_serializing_if = "Option::is_none")]
    pub qualifying_award_name: Option<String>,
    /// Which week number's regional pool invitation the team got
    #[serde(rename = "qualifying_pool_week", skip_serializing_if = "Option::is_none")]
    pub qualifying_pool_week: Option<i32>,
}

impl RegionalAdvancement {
    /// Information about how a regional team qualified for FIRST Championship.
    pub fn new(cmp: bool, cmp_status: CmpStatus) -> RegionalAdvancement {
        RegionalAdvancement {
            cmp,
            cmp_status,
            qualifying_event: None,
            qualifying_award_name: None,
            qualifying_pool_week: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CmpStatus {
    #[serde(rename = "NotInvited")]
    NotInvited,
    #[serde(rename = "PreQualified")]
    PreQualified,
    #[serde(rename = "EventQualified")]
    EventQualified,
    #[serde(rename = "PoolQualified")]
    PoolQualified,
    #[serde(rename = "Declined")]
    Declined,
}

impl Default for CmpStatus {
    fn default() -> CmpStatus {
        Self::NotInvited
    }
}

